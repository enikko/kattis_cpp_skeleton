#!/usr/bin/env python3
"""
This file is a program to fetch tests automatically for a specific problem on open kattis.
Usage:
fetch_tests TEST_FOLDER PROBLEM_ID
where
    TEST_FOLDER - The folder where the input (d*.in) and the expected output (d*.out)
                  will be stored.
    PROBLEM_ID - The id of the problem.

:Author: Erik Nikko <65210465+enikko@users.noreply.github.com>
"""

# MIT License
#
# Copyright (c) 2022 Erik Nikko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import requests
import re
import sys

def get_problem(problem_id):
    return requests.get("https://open.kattis.com/problems/"+problem_id).text

def get_input_output(data):
    io = []
    for match in re.findall(r'\<table *class="sample".*?\</table>', data, re.M|re.S):
        io.append(list(map(lambda s: s[5:-6], re.findall(r'\<pre>.*?\</pre>', match, re.M|re.S))))
    return io

def write_tests(io, test_folder):
    i=0
    for entry in io:
        test_path=test_folder+"/"+str(i)
        # If only one <pre> tag was found in a sample assume empty input
        # otherwise assume first is input and second is output
        with open(test_path+".in", "w") as f:
            f.write(entry[0] if len(entry) > 1 else "")
        with open(test_path+".ans", "w") as f:
            f.write(entry[1 if len(entry) > 1 else 0])
        i += 1


if __name__ == "__main__":
    test_folder = sys.argv[1]
    problem_id = sys.argv[2]
    raw_data = get_problem(problem_id)
    io = get_input_output(raw_data)
    write_tests(io, test_folder)
